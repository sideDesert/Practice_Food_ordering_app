{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\L3\\\\Desktop\\\\practice\\\\project\\\\food_order_app\\\\src\\\\Components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport classes from './AvailableMeals.module.css';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem'; // const DUMMY_MEALS = [\n//     {\n//       id: 'm1',\n//       name: 'Sushi',\n//       description: 'Finest fish and veggies',\n//       price: 22.99,\n//     },\n//     {\n//       id: 'm2',\n//       name: 'Schnitzel',\n//       description: 'A german specialty!',\n//       price: 16.5,\n//     },\n//     {\n//       id: 'm3',\n//       name: 'Barbecue Burger',\n//       description: 'American, raw, meaty',\n//       price: 12.99,\n//     },\n//     {\n//       id: 'm4',\n//       name: 'Green Bowl',\n//       description: 'Healthy...and green...',\n//       price: 18.99,\n//     },\n//   ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    async function fetchMeals() {\n      try {\n        setIsLoading(true);\n        const response = await fetch(\"https://food-dilevery-app-default-rtdb.asia-southeast1.firebasedatabase.app/meals.jso\");\n        const data = await response.json();\n        let MEALS = [];\n\n        for (const key in data) {\n          MEALS.push({\n            id: key,\n            name: data[key].name,\n            description: data[key].description,\n            price: data[key].price\n          });\n        }\n\n        setMeals(MEALS);\n        setIsLoading(false);\n      } catch (err) {\n        setIsLoading(false);\n        setError(true);\n        console.error('Error: ' + err.message);\n      }\n    }\n\n    fetchMeals();\n  }, []);\n  let mealsList = meals.map(meal => {\n    return /*#__PURE__*/_jsxDEV(MealItem, {\n      id: meal.id,\n      name: meal.name,\n      description: meal.description,\n      price: meal.price\n    }, meal.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this);\n  });\n\n  let mealsComponent = /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mealsList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this);\n\n  let loadingComponent = /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.loading,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, this);\n\n  let errorComponent = /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.loading,\n      children: \"Aw snap! Something went wrong\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 7\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: [isLoading && !error ? loadingComponent : mealsComponent, !isLoading && error && errorComponent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AvailableMeals, \"wiYup2gGDtgBEPYhko2hYb9s62M=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["C:/Users/L3/Desktop/practice/project/food_order_app/src/Components/Meals/AvailableMeals.js"],"names":["useEffect","useState","classes","Card","MealItem","AvailableMeals","meals","setMeals","isLoading","setIsLoading","error","setError","fetchMeals","response","fetch","data","json","MEALS","key","push","id","name","description","price","err","console","message","mealsList","map","meal","mealsComponent","loadingComponent","loading","errorComponent"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport classes from './AvailableMeals.module.css'\r\nimport Card from '../UI/Card';\r\nimport MealItem from './MealItem/MealItem';\r\n\r\n// const DUMMY_MEALS = [\r\n//     {\r\n//       id: 'm1',\r\n//       name: 'Sushi',\r\n//       description: 'Finest fish and veggies',\r\n//       price: 22.99,\r\n//     },\r\n//     {\r\n//       id: 'm2',\r\n//       name: 'Schnitzel',\r\n//       description: 'A german specialty!',\r\n//       price: 16.5,\r\n//     },\r\n//     {\r\n//       id: 'm3',\r\n//       name: 'Barbecue Burger',\r\n//       description: 'American, raw, meaty',\r\n//       price: 12.99,\r\n//     },\r\n//     {\r\n//       id: 'm4',\r\n//       name: 'Green Bowl',\r\n//       description: 'Healthy...and green...',\r\n//       price: 18.99,\r\n//     },\r\n//   ];\r\n\r\n\r\nconst AvailableMeals = ()=>{\r\n  \r\n    const[meals, setMeals] = useState([]);\r\n    const[isLoading, setIsLoading] = useState(false);\r\n    const[error, setError] = useState(false);\r\n\r\n    useEffect(()=>{\r\n      async function fetchMeals(){\r\n        try {\r\n          setIsLoading(true);\r\n          const response = await fetch(\r\n            \"https://food-dilevery-app-default-rtdb.asia-southeast1.firebasedatabase.app/meals.jso\"\r\n          );\r\n          const data = await response.json();\r\n\r\n          let MEALS = [];\r\n          for (const key in data) {\r\n            MEALS.push({\r\n              id: key,\r\n              name: data[key].name,\r\n              description: data[key].description,\r\n              price: data[key].price,\r\n            });\r\n          }\r\n          setMeals(MEALS);\r\n          setIsLoading(false);\r\n\r\n        } catch (err) {\r\n          setIsLoading(false);\r\n          setError(true)\r\n          console.error('Error: ' + err.message);\r\n        }\r\n        \r\n      }\r\n      fetchMeals()\r\n    },[])\r\n\r\n    \r\n    let mealsList = meals.map((meal) => {\r\n        return (\r\n          <MealItem\r\n            id={meal.id}\r\n            key={meal.id}\r\n            name={meal.name}\r\n            description={meal.description}\r\n            price={meal.price}\r\n          />\r\n        );\r\n    });  \r\n    let mealsComponent = (\r\n      <Card>\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    );\r\n    let loadingComponent = (\r\n      <Card>\r\n      <p className={classes.loading}>Loading...</p>\r\n      </Card>\r\n    )\r\n    let errorComponent = (\r\n      <Card>\r\n        <p className = {classes.loading}>Aw snap! Something went wrong</p>\r\n      </Card>\r\n    )\r\n    return (\r\n      <section className={classes.meals}>\r\n      { isLoading&&!error ? loadingComponent : mealsComponent}\r\n      {!isLoading&&error && errorComponent}   \r\n      </section>\r\n    );\r\n}\r\n\r\nexport default AvailableMeals;"]},"metadata":{},"sourceType":"module"}